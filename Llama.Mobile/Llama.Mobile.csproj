<Project Sdk="Microsoft.NET.Sdk">
    <Import Project="..\LLama\LLamaSharp.Runtime.targets" />

    <PropertyGroup>
        <IsSupportedPlatform Condition="'$(OS)' == 'Windows_NT'">true</IsSupportedPlatform>
        <IsSupportedPlatform Condition="'$(OS)' != 'Windows_NT'">false</IsSupportedPlatform>
    </PropertyGroup>

    <Target Name="SkipUnsupportedPlatformBuild" BeforeTargets="Build" Condition="'$(IsSupportedPlatform)' == 'false'">
        <Message Importance="high" Text="Skipping build of $(MSBuildProjectName): unsupported on this platform." />
        <Error Text="Skipping $(MSBuildProjectName). Not supported on this platform." Condition="'$(BuildingInsideVisualStudio)' != 'true'" />
    </Target>

    <PropertyGroup>
        <TargetFrameworks>net8.0-android</TargetFrameworks>

        <!--Temporarily Disable iOS and MacCatalyst until native lib support is added-->
        <!--<TargetFrameworks>$(TargetFrameworks);net8.0-ios;net8.0-maccatalyst</TargetFrameworks>-->



        <!-- Note for MacCatalyst:
		The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
		When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
		The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
		either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
        <!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

        <OutputType>Exe</OutputType>
        <RootNamespace>Llama.Mobile</RootNamespace>
        <UseMaui>true</UseMaui>
        <SingleProject>true</SingleProject>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>

        <!-- Display name -->
        <ApplicationTitle>Llama.Mobile</ApplicationTitle>

        <!-- App Identifier -->
        <ApplicationId>com.llama.mobile</ApplicationId>

        <!-- Versions -->
        <ApplicationDisplayVersion>1.0</ApplicationDisplayVersion>
        <ApplicationVersion>1</ApplicationVersion>

        <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">11.0</SupportedOSPlatformVersion>
        <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">13.1</SupportedOSPlatformVersion>
        <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
        <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
        <TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
        <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>
    </PropertyGroup>

    <Target Name="EnsureFolders">
        <MakeDir Directories="Resources\Raw" Condition="!Exists('Resources\Raw')" />
    </Target>

    <!-- Download a single file:
       - Computes the full target file name (DesiredFile).
       - If DesiredFile already exists, the download is skipped.
       - Otherwise, creates a temporary folder (TempDownload), 
         downloads the file there using DownloadFile, and then moves it
         to DesiredFile. Finally, cleans up the temporary folder.  -->
    <Target Name="DownloadSingleFile" DependsOnTargets="EnsureFolders">
        <!-- (These properties come in via the MSBuild call.) -->
        <PropertyGroup>
            <DesiredFile>$([System.IO.Path]::Combine($(DestinationFolder), $(LocalFileName)))</DesiredFile>
        </PropertyGroup>

        <Message Text="Processing file: $(DesiredFile)" Importance="high" />

        <!-- Define a flag based on whether the file already exists -->
        <PropertyGroup>
            <DownloadNeeded Condition="!Exists('$(DesiredFile)')">true</DownloadNeeded>
            <DownloadNeeded Condition="Exists('$(DesiredFile)')">false</DownloadNeeded>
        </PropertyGroup>
        <Message Text="Download needed: $(DownloadNeeded)" Importance="high" />

        <!-- If the file is already present, skip the download (by simply exiting this target) -->
        <Message Text="File $(DesiredFile) already exists; skipping download." Importance="high" Condition=" '$(DownloadNeeded)'=='false' " />

        <!-- Only download if required -->
        <DownloadFile SourceUrl="$(SourceUrl)" DestinationFolder="TempDownload" SkipUnchangedFiles="true" Condition=" '$(DownloadNeeded)'=='true' " />

        <!-- If a file was downloaded, move it to the desired name.
         We assume TempDownload now contains the downloaded file.
         (You might want to refine this if TempDownload could ever contain multiple files.) -->
        <ItemGroup Condition=" '$(DownloadNeeded)'=='true' ">
            <TempFile Include="TempDownload/*.*" />
        </ItemGroup>
        <Message Text="Downloaded file (temp): @(TempFile)" Importance="high" Condition=" '$(DownloadNeeded)'=='true' " />
        <Move SourceFiles="@(TempFile)" DestinationFiles="$(DesiredFile)" Condition=" '$(DownloadNeeded)'=='true' and @(TempFile) != '' " />
        <Message Text="Renamed downloaded file to $(DesiredFile)" Importance="high" Condition=" '$(DownloadNeeded)'=='true' and @(TempFile) != '' " />

        <!-- Remove the temporary download folder -->
        <RemoveDir Directories="TempDownload" Condition="Exists('TempDownload')" />
    </Target>

    <!-- Main target to process each file by calling the DownloadSingleFile target for each item.
       The MSBuild task will batch over the DownloadFileItem items, passing in each fileâ€™s metadata. -->
    <Target Name="DownloadAllFiles" BeforeTargets="DispatchToInnerBuilds;BeforeBuild">
        <MSBuild Projects="$(MSBuildProjectFile)" Targets="DownloadSingleFile" Properties="SourceUrl=%(DownloadFileItem.SourceUrl);DestinationFolder=%(DownloadFileItem.DestinationFolder);LocalFileName=%(DownloadFileItem.LocalFileName);TargetFramework=once" />
    </Target>

    <ItemGroup>
        <DownloadFileItem Include="Llama-3.2-1B-Instruct-Q4_0">
            <SourceUrl>https://huggingface.co/bartowski/Llama-3.2-1B-Instruct-GGUF/resolve/main/Llama-3.2-1B-Instruct-Q4_0.gguf</SourceUrl>
            <DestinationFolder>Resources/Raw</DestinationFolder>
            <LocalFileName>Llama-3.2-1B-Instruct-Q4_0.gguf</LocalFileName>
        </DownloadFileItem>

        <!-- App Icon -->
        <MauiIcon Include="Resources\AppIcon\appicon.svg" ForegroundFile="Resources\AppIcon\appiconfg.svg" Color="#512BD4" />

        <!-- Splash Screen -->
        <MauiSplashScreen Include="Resources\Splash\splash.svg" Color="#512BD4" BaseSize="128,128" />

        <!-- Images -->
        <MauiImage Include="Resources\Images\*" />
        <MauiImage Update="Resources\Images\dotnet_bot.png" Resize="True" BaseSize="300,185" />

        <!-- Custom Fonts -->
        <MauiFont Include="Resources\Fonts\*" />

        <!-- Raw Assets (also remove the "Resources\Raw" prefix) -->
        <MauiAsset Include="Resources\Raw\**" LogicalName="%(RecursiveDir)%(Filename)%(Extension)" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.Maui.Controls" Version="$(MauiVersion)" />
        <PackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="$(MauiVersion)" />
        <PackageReference Include="Microsoft.Extensions.Logging.Debug" Version="8.0.1" />
    </ItemGroup>

    <ItemGroup>
        <ProjectReference Include="..\LLama\LLamaSharp.csproj" />
    </ItemGroup>

</Project>
