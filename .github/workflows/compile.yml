name: Update Binaries

on:
  workflow_dispatch:
  push:
    branches: [cron_job]
  #schedule:
  #  - cron: "22 22 * * 2"

jobs:
  compile-linux:
    name: Compile (Linux)
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: 'noavx'
            defines: '-DLLAMA_AVX=OFF -DLLAMA_AVX2=OFF -DLLAMA_FMA=OFF -DBUILD_SHARED_LIBS=ON'
          - build: 'avx2'
            defines: '-DBUILD_SHARED_LIBS=ON'
          - build: 'avx'
            defines: '-DLLAMA_AVX2=OFF -DBUILD_SHARED_LIBS=ON'
          - build: 'avx512'
            defines: '-DLLAMA_AVX512=ON -DBUILD_SHARED_LIBS=ON'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ggerganov/llama.cpp
      - name: Build
        id: cmake_build
        run: |
          mkdir build
          cd build
          cmake .. ${{ matrix.defines }}
          cmake --build . --config Release
      - uses: actions/upload-artifact@v3
        with:
          path: ./build/libllama.so
          name: llama-bin-linux-${{ matrix.build }}-x64.so

  compile-windows:
    name: Compile (Windows)
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: 'noavx'
            defines: '-DLLAMA_AVX=OFF -DLLAMA_AVX2=OFF -DLLAMA_FMA=OFF -DBUILD_SHARED_LIBS=ON'
          - build: 'avx2'
            defines: '-DBUILD_SHARED_LIBS=ON'
          - build: 'avx'
            defines: '-DLLAMA_AVX2=OFF -DBUILD_SHARED_LIBS=ON'
          - build: 'avx512'
            defines: '-DLLAMA_AVX512=ON -DBUILD_SHARED_LIBS=ON'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ggerganov/llama.cpp

      - name: Build
        id: cmake_build
        run: |
          mkdir build
          cd build
          cmake .. ${{ matrix.defines }}
          cmake --build . --config Release

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: .\build\bin\Release\llama.dll
          name: llama-bin-win-${{ matrix.build }}-x64.dll

  compile-windows-cublas:
    runs-on: windows-latest
    strategy:
      matrix:
        cuda: ['12.1.0', '11.7.1']
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v3
        with:
          repository: ggerganov/llama.cpp

      - uses: Jimver/cuda-toolkit@v0.2.10
        id: cuda-toolkit
        with:
          cuda: ${{ matrix.cuda }}

      - name: Build
        id: cmake_build
        run: |
          mkdir build
          cd build
          cmake .. -DLLAMA_CUBLAS=ON -DBUILD_SHARED_LIBS=ON
          cmake --build . --config Release

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: .\build\bin\Release\llama.dll
          name: llama-bin-win-cublas-cu${{ matrix.cuda }}-x64.dll
  
  build-deps:
    runs-on: ubuntu-latest
    name: "Gather Binaries"
    needs: [
      "compile-linux",
      # todo: "compile-macos",
      "compile-windows",
      "compile-windows-cublas"
    ]
    steps:
      - name: Make Directories
        run: |
          mkdir deps
          mkdir deps/linux
          mkdir deps/linux/avx
          mkdir deps/linux/avx2
          mkdir deps/linux/avx512
          mkdir deps/linux/noavx
          mkdir deps/win
          mkdir deps/win/avx
          mkdir deps/win/avx2
          mkdir deps/win/avx512
          mkdir deps/win/noavx
          mkdir deps/win/cu12.1.0
          mkdir deps/win/cu11.7.1
      
      # Linux
      - uses: actions/download-artifact@v3
        with:
          name: llama-bin-linux-avx-x64.so
          path: deps-linux/avx/libllama.so
      - uses: actions/download-artifact@v3
        with:
          name: llama-bin-linux-avx2-x64.so
          path: deps/linux/avx2/libllama.so
      - uses: actions/download-artifact@v3
        with:
          name: llama-bin-linux-avx512-x64.so 
          path: deps/linux/avx512/libllama.so
      - uses: actions/download-artifact@v3
        with:
          name: llama-bin-linux-noavx-x64.so 
          path: deps/linux/noavx/libllama.so

      # Windows
      - uses: actions/download-artifact@v3
        with:
          name: llama-bin-win-avx-x64.dll
          path: deps/win/avx/libllama.dll
      - uses: actions/download-artifact@v3
        with:
          name: llama-bin-win-avx2-x64.dll
          path: deps/win/avx2/libllama.dll
      - uses: actions/download-artifact@v3
        with:
          name: llama-bin-win-avx512-x64.dll 
          path: deps/win/avx512/libllama.dll
      - uses: actions/download-artifact@v3
        with:
          name: llama-bin-win-noavx-x64.dll 
          path: deps/win/noavx/libllama.dll

      # todo: macos

      # Windows (CUDA)
      - uses: actions/download-artifact@v3
        with:
          name: llama-bin-win-cublas-cu12.1.0-x64.dll
          path: cu12.1.0/win/cu12.1.0/llama.dll
      - uses: actions/download-artifact@v3
        with:
          name: llama-bin-win-cublas-cu11.7.1-x64.dll
          path: cu11.7.1/win/cu11.7.1/llama.dll

      # Package and upload
      - name: Package
        run: |
          7z a deps.zip deps
          7z a cu12.1.0.zip cu12.1.0
          7z a cu11.7.1.zip cu11.7.1

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: deps.zip
          name: deps.zip
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: cu12.1.0.zip
          name: cu12.1.0.zip
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          path: cu11.7.1
          name: cu11.7.1
